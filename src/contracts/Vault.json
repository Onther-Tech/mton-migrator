{
  "contractName": "Vault",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.12+commit.7709ece9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{},\"notice\":\"Vault is a implementation of TON and WTON vault to swap, stake, and unstake. All message-calls invoked by Vault are authorized and implemented in Exec.sol. Below empty implementation is just reserved for future functions that are readily accessible to the contract, but are not mandatory.\"}},\"settings\":{\"compilationTarget\":{\"/Users/pjh/workspace/plasma-evm-contracts/contracts/stake/vault/Vault.sol\":\"Vault\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/pjh/workspace/plasma-evm-contracts/contracts/exec/DelegateExecStorage.sol\":{\"keccak256\":\"0x154c878b5877b88110c017bd7be1f1846a76ce61fee004e5aabd4a95584220bb\",\"urls\":[\"bzz-raw://c8657e08601d75873b2aecad16e4680038a830159891f78d7ba95fb376ac1b73\",\"dweb:/ipfs/QmeREVUTxC6NCpkQGJFs5cWerMKjyzBukb5Yxa8k5W1GJe\"]},\"/Users/pjh/workspace/plasma-evm-contracts/contracts/stake/vault/Vault.sol\":{\"keccak256\":\"0xa0307e5b2f68df2b292396799dcfe40395ac6348f5aba54374ab4138616498d6\",\"urls\":[\"bzz-raw://57632b08363c05e33110e7e4c060ab6297a535b6930a6e81d2dc8db664e988b8\",\"dweb:/ipfs/QmT4YkmKqCCEb44x5CDqNQUuSdRjneVfo9Ph5A3kZd4hTH\"]},\"/Users/pjh/workspace/plasma-evm-contracts/contracts/stake/vault/VaultStorage.sol\":{\"keccak256\":\"0xe14bb00a0b97b34678d7fe64cc9d7b2ef8c7028f5dda9a18a592b15806e369ec\",\"urls\":[\"bzz-raw://748a295266e8a1cf845719a71b2bf499f243040ea823fbda9469b46e03df89d6\",\"dweb:/ipfs/QmWLFSFEwRdeyV32oCSKvfNp9cdKUXrcefk2JwvgHLBXXK\"]},\"/Users/pjh/workspace/plasma-evm-contracts/node_modules/openzeppelin-solidity/contracts/GSN/Context.sol\":{\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\",\"urls\":[\"bzz-raw://216ef9d6b614db4eb46970b4e84903f2534a45572dd30a79f0041f1a5830f436\",\"dweb:/ipfs/QmNPrJ4MWKUAWzKXpUqeyKRUfosaoANZAqXgvepdrCwZAG\"]},\"/Users/pjh/workspace/plasma-evm-contracts/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24\",\"urls\":[\"bzz-raw://cf4c00fc3c37cc5acf0c82ec6fd97bab67d72c2567fdc0ebf023d9c09b30a08e\",\"dweb:/ipfs/Qmb7TChG6DsEDX7LooJ4vmxot19f7VXX8S1zUGPeJTWbwZ\"]}},\"version\":1}",
  "bytecode": "0x608060405260006100176001600160e01b0361006616565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006a565b3390565b6103aa806100796000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80635c60da1b1461005c578063715018a61461007a5780638da5cb5b146100845780638f32d59b1461008c578063f2fde38b146100a1575b600080fd5b6100646100b4565b60405161007191906102f2565b60405180910390f35b6100826100c3565b005b61006461013a565b610094610149565b6040516100719190610300565b6100826100af366004610233565b61016d565b6001546001600160a01b031681565b6100cb610149565b6100f05760405162461bcd60e51b81526004016100e79061031e565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b600080546001600160a01b031661015e61019d565b6001600160a01b031614905090565b610175610149565b6101915760405162461bcd60e51b81526004016100e79061031e565b61019a816101a1565b50565b3390565b6001600160a01b0381166101c75760405162461bcd60e51b81526004016100e79061030e565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b803561022d81610353565b92915050565b60006020828403121561024557600080fd5b60006102518484610222565b949350505050565b61026281610337565b82525050565b61026281610342565b600061027e60268361032e565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b60006102c660208361032e565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572815260200192915050565b6020810161022d8284610259565b6020810161022d8284610268565b6020808252810161022d81610271565b6020808252810161022d816102b9565b90815260200190565b600061022d82610347565b151590565b6001600160a01b031690565b61035c81610337565b811461019a57600080fdfea365627a7a7231582058267886fbe150acc74eb4f94f4fe235030517e5e49f744f912c688ec0b1abb16c6578706572696d656e74616cf564736f6c634300050c0040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80635c60da1b1461005c578063715018a61461007a5780638da5cb5b146100845780638f32d59b1461008c578063f2fde38b146100a1575b600080fd5b6100646100b4565b60405161007191906102f2565b60405180910390f35b6100826100c3565b005b61006461013a565b610094610149565b6040516100719190610300565b6100826100af366004610233565b61016d565b6001546001600160a01b031681565b6100cb610149565b6100f05760405162461bcd60e51b81526004016100e79061031e565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b600080546001600160a01b031661015e61019d565b6001600160a01b031614905090565b610175610149565b6101915760405162461bcd60e51b81526004016100e79061031e565b61019a816101a1565b50565b3390565b6001600160a01b0381166101c75760405162461bcd60e51b81526004016100e79061030e565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b803561022d81610353565b92915050565b60006020828403121561024557600080fd5b60006102518484610222565b949350505050565b61026281610337565b82525050565b61026281610342565b600061027e60268361032e565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b60006102c660208361032e565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572815260200192915050565b6020810161022d8284610259565b6020810161022d8284610268565b6020808252810161022d81610271565b6020808252810161022d816102b9565b90815260200190565b600061022d82610347565b151590565b6001600160a01b031690565b61035c81610337565b811461019a57600080fdfea365627a7a7231582058267886fbe150acc74eb4f94f4fe235030517e5e49f744f912c688ec0b1abb16c6578706572696d656e74616cf564736f6c634300050c0040",
  "sourceMap": "431:35:45:-;;;698:17:59;718:12;-1:-1:-1;;;;;718:10:59;:12;:::i;:::-;740:6;:18;;-1:-1:-1;;;;;;740:18:59;-1:-1:-1;;;;;740:18:59;;;;;;;773:43;;740:18;;-1:-1:-1;740:18:59;773:43;;740:6;;773:43;664:159;431:35:45;;788:96:49;867:10;788:96;:::o;431:35:45:-;;;;;;;",
  "deployedSourceMap": "431:35:45:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;431:35:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;172:37:9;;;:::i;:::-;;;;;;;;;;;;;;;;1684:137:59;;;:::i;:::-;;899:77;;;:::i;1250:92::-;;;:::i;:::-;;;;;;;;1970:107;;;;;;;;;:::i;172:37:9:-;;;-1:-1:-1;;;;;172:37:9;;:::o;1684:137:59:-;1103:9;:7;:9::i;:::-;1095:54;;;;-1:-1:-1;;;1095:54:59;;;;;;;;;;;;;;;;;1782:1;1766:6;;1745:40;;-1:-1:-1;;;;;1766:6:59;;;;1745:40;;1782:1;;1745:40;1812:1;1795:19;;-1:-1:-1;;;;;;1795:19:59;;;1684:137::o;899:77::-;937:7;963:6;-1:-1:-1;;;;;963:6:59;899:77;:::o;1250:92::-;1290:4;1329:6;;-1:-1:-1;;;;;1329:6:59;1313:12;:10;:12::i;:::-;-1:-1:-1;;;;;1313:22:59;;1306:29;;1250:92;:::o;1970:107::-;1103:9;:7;:9::i;:::-;1095:54;;;;-1:-1:-1;;;1095:54:59;;;;;;;;;2042:28;2061:8;2042:18;:28::i;:::-;1970:107;:::o;788:96:49:-;867:10;788:96;:::o;2178:225:59:-;-1:-1:-1;;;;;2251:22:59;;2243:73;;;;-1:-1:-1;;;2243:73:59;;;;;;;;;2352:6;;;2331:38;;-1:-1:-1;;;;;2331:38:59;;;;2352:6;;;2331:38;;;2379:6;:17;;-1:-1:-1;;;;;;2379:17:59;-1:-1:-1;;;;;2379:17:59;;;;;;;;;;2178:225::o;5:130:-1:-;72:20;;97:33;72:20;97:33;;;57:78;;;;;142:241;;246:2;234:9;225:7;221:23;217:32;214:2;;;262:1;259;252:12;214:2;297:1;314:53;359:7;339:9;314:53;;;304:63;208:175;-1:-1;;;;208:175;390:137;489:32;515:5;489:32;;;484:3;477:45;471:56;;;654:104;731:21;746:5;731:21;;766:465;;926:67;990:2;985:3;926:67;;;1026:66;1006:87;;-1:-1;;;1122:2;1113:12;;1106:88;1222:2;1213:12;;912:319;-1:-1;;912:319;1240:364;;1400:67;1464:2;1459:3;1400:67;;;1500:66;1480:87;;1595:2;1586:12;;1386:218;-1:-1;;1386:218;1612:213;1730:2;1715:18;;1744:71;1719:9;1788:6;1744:71;;2084:201;2196:2;2181:18;;2210:65;2185:9;2248:6;2210:65;;2292:407;2483:2;2497:47;;;2468:18;;2558:131;2468:18;2558:131;;2706:407;2897:2;2911:47;;;2882:18;;2972:131;2882:18;2972:131;;3121:163;3224:19;;;3273:4;3264:14;;3217:67;3292:91;;3354:24;3372:5;3354:24;;3496:85;3562:13;3555:21;;3538:43;3588:121;-1:-1;;;;;3650:54;;3633:76;3716:117;3785:24;3803:5;3785:24;;;3778:5;3775:35;3765:2;;3824:1;3821;3814:12",
  "source": "pragma solidity ^0.5.12;\npragma experimental ABIEncoderV2;\n\nimport { VaultStorage } from  \"./VaultStorage.sol\";\n\n\n/**\n * @notice Vault is a implementation of TON and WTON vault to swap, stake, and unstake.\n * All message-calls invoked by Vault are authorized and implemented in Exec.sol.\n * Below empty implementation is just reserved for future functions that are readily\n * accessible to the contract, but are not mandatory.\n */\ncontract Vault is VaultStorage {\n\n}",
  "sourcePath": "/Users/pjh/workspace/plasma-evm-contracts/contracts/stake/vault/Vault.sol",
  "ast": {
    "absolutePath": "/Users/pjh/workspace/plasma-evm-contracts/contracts/stake/vault/Vault.sol",
    "exportedSymbols": {
      "Vault": [
        14372
      ]
    },
    "id": 14373,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 14366,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:45"
      },
      {
        "id": 14367,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "25:33:45"
      },
      {
        "absolutePath": "/Users/pjh/workspace/plasma-evm-contracts/contracts/stake/vault/VaultStorage.sol",
        "file": "./VaultStorage.sol",
        "id": 14369,
        "nodeType": "ImportDirective",
        "scope": 14373,
        "sourceUnit": 14384,
        "src": "60:51:45",
        "symbolAliases": [
          {
            "foreign": 14368,
            "local": null
          }
        ],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 14370,
              "name": "VaultStorage",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 14383,
              "src": "449:12:45",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_VaultStorage_$14383",
                "typeString": "contract VaultStorage"
              }
            },
            "id": 14371,
            "nodeType": "InheritanceSpecifier",
            "src": "449:12:45"
          }
        ],
        "contractDependencies": [
          3239,
          14383,
          19972,
          21006
        ],
        "contractKind": "contract",
        "documentation": "@notice Vault is a implementation of TON and WTON vault to swap, stake, and unstake.\nAll message-calls invoked by Vault are authorized and implemented in Exec.sol.\nBelow empty implementation is just reserved for future functions that are readily\naccessible to the contract, but are not mandatory.",
        "fullyImplemented": true,
        "id": 14372,
        "linearizedBaseContracts": [
          14372,
          14383,
          3239,
          21006,
          19972
        ],
        "name": "Vault",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 14373,
        "src": "431:35:45"
      }
    ],
    "src": "0:466:45"
  },
  "legacyAST": {
    "absolutePath": "/Users/pjh/workspace/plasma-evm-contracts/contracts/stake/vault/Vault.sol",
    "exportedSymbols": {
      "Vault": [
        14372
      ]
    },
    "id": 14373,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 14366,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:45"
      },
      {
        "id": 14367,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "25:33:45"
      },
      {
        "absolutePath": "/Users/pjh/workspace/plasma-evm-contracts/contracts/stake/vault/VaultStorage.sol",
        "file": "./VaultStorage.sol",
        "id": 14369,
        "nodeType": "ImportDirective",
        "scope": 14373,
        "sourceUnit": 14384,
        "src": "60:51:45",
        "symbolAliases": [
          {
            "foreign": 14368,
            "local": null
          }
        ],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 14370,
              "name": "VaultStorage",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 14383,
              "src": "449:12:45",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_VaultStorage_$14383",
                "typeString": "contract VaultStorage"
              }
            },
            "id": 14371,
            "nodeType": "InheritanceSpecifier",
            "src": "449:12:45"
          }
        ],
        "contractDependencies": [
          3239,
          14383,
          19972,
          21006
        ],
        "contractKind": "contract",
        "documentation": "@notice Vault is a implementation of TON and WTON vault to swap, stake, and unstake.\nAll message-calls invoked by Vault are authorized and implemented in Exec.sol.\nBelow empty implementation is just reserved for future functions that are readily\naccessible to the contract, but are not mandatory.",
        "fullyImplemented": true,
        "id": 14372,
        "linearizedBaseContracts": [
          14372,
          14383,
          3239,
          21006,
          19972
        ],
        "name": "Vault",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 14373,
        "src": "431:35:45"
      }
    ],
    "src": "0:466:45"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.12+commit.7709ece9.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.23",
  "updatedAt": "2020-03-05T06:33:29.849Z",
  "devdoc": {
    "methods": {
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {},
    "notice": "Vault is a implementation of TON and WTON vault to swap, stake, and unstake. All message-calls invoked by Vault are authorized and implemented in Exec.sol. Below empty implementation is just reserved for future functions that are readily accessible to the contract, but are not mandatory."
  }
}