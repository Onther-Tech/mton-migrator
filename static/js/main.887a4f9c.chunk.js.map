{"version":3,"sources":["addresses.js","services/Web3Service.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ethereum","MTON","MTONMigrator","development","fetchNetwork","web3","Promise","resolve","reject","eth","net","getId","err","netId","fetchAccounts","getAccounts","accounts","_MTON","createCurrency","addressSelector","addresses","App","state","mton","migrator","mtonBalance","migratorBalance","handleClick","a","window","enable","provider","stack","includes","Error","message","currentProvider","Web3","addrs","console","log","Contract","MTONArtifact","abi","MTONMigratorArtifact","methods","balanceOf","call","claimable","setState","renderAccount","bind","renderLoginButton","claimAll","this","from","self","send","on","tx","className","onClick","networkName","_address","wei","toString","R","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.887a4f9c.chunk.js","sourcesContent":["module.exports = {\n  // ethereum mainnet\n  ethereum: {\n    MTON: \"\",\n    MTONMigrator: \"\"\n  },\n  // development network\n  development: {\n    MTON: \"0xaeD35521EF8aB2354E19A508D1De391123bEf1e1\",\n    MTONMigrator: \"0x581e22d0e26c5d4be27eF8fcb57eAfa0c12EC73d\",\n  }\n}","import isEmpty from 'lodash/isEmpty';\n\nexport const fetchNetwork = (web3) => {\n  return new Promise((resolve, reject) => {\n\n    web3 && web3.eth.net && web3.eth.net.getId((err, netId) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(netId);\n      }\n    });\n  });\n};\n\nexport const fetchAccounts = (web3) => {\n  return new Promise((resolve, reject) => {\n    web3 && web3.eth && web3.eth.getAccounts((err, accounts) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(accounts);\n      }\n    });\n  });\n};\n\nexport const networkName = (netId) => {\n  switch (netId) {\n    case 1:\n      return 'Ethereum mainnet';\n    case 2:\n      return 'Ropsten testnet';\n    case 16:\n      return 'Plasma EVM Faraday testnet';\n    default:\n      return `Private network (id=${netId})`;\n  }\n}","import React, { Component } from 'react';\nimport Web3 from 'web3';\n\nimport { createCurrency } from '@makerdao/currency';\n\nimport MTONArtifact from './contracts/MTON.json';\nimport MTONMigratorArtifact from './contracts/MTONMigrator.json';\nimport addresses from './addresses.js';\n\nimport {fetchAccounts, fetchNetwork, networkName } from \"./services/Web3Service\";\n\nimport './App.css';\n\n\nconst _MTON = createCurrency('MTON');\n\nconst addressSelector = (netId) => {\n  switch (netId) {\n    case 1:\n      return addresses['ethereum'];\n    default:\n      return addresses['development'];\n  }\n}\n\nclass App extends Component {\n  state = {\n    // env\n    web3: false,\n    accounts: [],\n    netId: 0,\n    mton: null,\n    migrator: null,\n\n    // balances\n    mtonBalance: null,\n    migratorBalance: null,\n  }\n\n  constructor() {\n    super();\n\n    this.renderAccount = this.renderAccount.bind(this);\n    this.renderLoginButton = this.renderLoginButton.bind(this);\n    this.claimAll = this.claimAll.bind(this);\n  }\n\n  handleClick = async () => {\n    let provider;\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        await window.ethereum.enable();\n        provider = window.ethereum;\n      } catch (e) {\n        if (e.stack.includes('Error: User denied account authorization')) {\n          throw new Error('User denied account authorization');\n        } else {\n          throw new Error(e.message);\n        }\n      }\n    } else if (window.web3) {\n      provider = window.web3.currentProvider;\n    } else {\n      throw new Error('No web3 provider detected');\n    }\n\n    const web3 =  new Web3(provider);\n    const accounts = await fetchAccounts(web3);\n    const netId = await fetchNetwork(web3);\n\n    const addrs = addressSelector(netId);\n\n    console.log(\"addrs\", addrs);\n\n    // new web3.eth.Contract(jsonInterface[, address][, options])\n\n    const mton = new web3.eth.Contract(MTONArtifact.abi, addrs.MTON);\n    const migrator = new web3.eth.Contract(MTONMigratorArtifact.abi, addrs.MTONMigrator);\n\n    window.mton = mton;\n    window.migrator = migrator;\n\n    const mtonBalance = await mton.methods.balanceOf(accounts[0]).call();\n    const migratorBalance = await migrator.methods.claimable(accounts[0]).call();\n\n    console.log(\"mtonBalance\", mtonBalance);\n    console.log(\"migratorBalance\", migratorBalance);\n\n    this.setState({\n      web3,\n      accounts,\n      netId,\n      mton,\n      migrator,\n      mtonBalance,\n      migratorBalance,\n    });\n  };\n\n  async claimAll() {\n    const { accounts, migrator } = this.state;\n    const from = accounts[0];\n\n    const self = this;\n\n    migrator.methods.claimAll().send({ from })\n      .on('transactionHash', function(tx){\n        self.setState({ tx });\n      });\n  }\n\n  renderLoginButton() {\n    const { web3 } = this.state;\n\n    return (\n      <div>\n        <button className=\"Login-button Login-mm\" onClick={this.handleClick}>\n          {web3 ? 'Loading...' : 'Login with MetaMask'}\n        </button>\n      </div>\n    );\n  }\n\n  renderAccount() {\n    const {\n      accounts,\n      netId,\n      mton,\n      migrator,\n      mtonBalance,\n      migratorBalance,\n      tx = null,\n    } = this.state;\n\n    const from = accounts[0];\n\n    return (\n      <div>\n        <p>\n          Using {networkName(netId)}\n          <br />\n          Logged in as {from}\n          <br />\n          MTON deployed at {mton._address}\n          <br />\n          MTONMigrator deployed at {migrator._address}\n        </p>\n\n        <br />\n\n        <p>\n          MTON balance: {_MTON.wei(mtonBalance).toString()}\n          <br />\n          Claimable MTON: {_MTON.wei(migratorBalance).toString()}\n          <br />\n        </p>\n\n        {\n          tx && <p>\n            tx: {tx}\n          </p>\n        }\n\n        <button onClick={this.claimAll}>\n          claim MTON\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    const { web3 } = this.state;\n\n    const R = !web3 ? this.renderLoginButton\n      : this.renderAccount;\n\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n\n        < R />\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}